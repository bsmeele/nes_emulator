.reserve $00 $0F  // Bubble sort array
.reserve $10 $1F  // Insertion sort array
.reserve $20 $2F  // Quicksort array
.reserve $30 $32  // Array pointer and length

START:
  LDX #0x00
  LDA #0x89
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0xE3
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0xF4
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0x22
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0x02
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0x2C
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0x9B
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0x2F
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0xD8
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0x66
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0xD1
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0x47
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0xBC
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0x3F
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0x5D
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X
  INX
  LDA #0xEA
  STA 0x00,X
  STA 0x010,X
  STA 0x020,X

  LDA #0x00
  STA 0x30
  LDA #0x00
  STA 0x31
  LDA #0x10
  STA 0x32
  JSR BUBBLESORT_START

  LDA #0x10
  STA 0x30
  LDA #0x00
  STA 0x31
  LDA #0x10
  STA 0x32
  JSR INSERTIONSORT_START

  LDA #0x20
  STA 0x30
  LDA #0x00
  STA 0x31
  LDA #0x10
  STA 0x32
  JSR QUICKSORT_SETUP

  BRK

BUBBLESORT_START:
  // 0x0030-0x0031 is the pointer to the list
  // n is written to 0x0032 by caller
  LDA #0xFF
  STA 0x33
BUBBLESORT_OUTER_LOOP:
  LDA #0x00
  CMP 0x33
  BEQ BUBBLESORT_END_OUTER
  STA 0x33
  LDY #0x01
BUBBLESORT_INNER_LOOP:
  CPY 0x32
  BCS BUBBLESORT_END_INNER
  DEY
  LDA (0x30),Y
  INY
  CMP (0x30),Y
  BCC BUBBLESORT_END_IF
  BEQ BUBBLESORT_END_IF
BUBBLESORT_IF:
  TAX
  LDA (0x30),Y
  DEY
  STA (0x30),Y
  INY
  TXA
  STA (0x30),Y
  INC 0x33
BUBBLESORT_END_IF:
  INY
  SEC
  BCS BUBBLESORT_INNER_LOOP
BUBBLESORT_END_INNER:
  DEC 0x0032
  SEC
  BCS BUBBLESORT_OUTER_LOOP
BUBBLESORT_END_OUTER:
  RTS

INSERTIONSORT_START:
  // 0x0030-0x0031 is the pointer to the list
  // n is written to 0x0032 by caller
  LDY #0x01
INSERTIONSORT_OUTER_LOOP:
  CPY 0x32
  BCS INSERTIONSORT_END_OUTER
  LDA (0x30),Y
  STA 0x33
  TYA
  TAX
INSERTIONSORT_INNER_LOOP:
  CPY #0x00
  BCC INSERTIONSORT_END_INNER_1
  BEQ INSERTIONSORT_END_INNER_1
  DEY
  LDA (0x30),Y
  CMP 0x33
  BCC INSERTIONSORT_END_INNER_0
  BEQ INSERTIONSORT_END_INNER_0
  INY
  STA (0x30),Y
  DEY
  SEC
  BCS INSERTIONSORT_INNER_LOOP
INSERTIONSORT_END_INNER_0:
  INY
INSERTIONSORT_END_INNER_1:
  LDA 0x33
  STA (0x30),Y
  TXA
  TAY
  INY
  SEC
  BCS INSERTIONSORT_OUTER_LOOP
INSERTIONSORT_END_OUTER:
  RTS

// 0x0030-0x0031 is the pointer to the list
// The length of the list is written to 0x0032 by the caller
QUICKSORT_SETUP:
  LDX 0x32
  DEX
  LDY #0x00
QUICKSORT_START:
  CPY #0x00
  BCC QUICKSORT_END
  CPX #0x00
  BCC QUICKSORT_END
  STX tmp_hi
  CPY tmp_hi
  BCS QUICKSORT_END
  TXA
  PHA
  TYA
  PHA
  JSR PIVOT_START  // returne value is passed through accumulator
  TAX
  PLA
  TAY
  TXA
  PHA
  JSR QUICKSORT_START  // returne value is passed through accumulator
  PLA
  TAY
  INY
  PLA
  TAX
  JSR QUICKSORT_START
QUICKSORT_END:
  RTS

PIVOT_START:
  // y = lo, x = hi
  LDA (0x30),Y  // Acc = pivot
  DEY  // y = i
  INX  // x = j
PIVOT_LOOP:
PIVOT_I_LOOP:
  INY
  CMP (0x30),Y
  BCC PIVOT_I_LOOP_END
  BEQ PIVOT_I_LOOP_END
  BCS PIVOT_I_LOOP
PIVOT_I_LOOP_END:
  STX tmp_j
  STY tmp_i
  LDX tmp_i  // x = i
  LDY tmp_j  // y = j
PIVOT_J_LOOP:
  DEY
  CMP (0x30),Y
  BCC PIVOT_J_LOOP
PIVOT_J_LOOP_END:
  STY tmp_j
  CPX tmp_j
  BCC PIVOT_SWAP
  TYA
  RTS  // Return with Acc - j
PIVOT_SWAP:
  STA tmp_pivot
  STX tmp_i
  LDA (0x30),Y  // Acc = A[j]
  STA tmp_A_j
  LDY tmp_i
  LDA (0x30),Y  // Acc = A[i]
  LDY tmp_j
  STA (0x30),y
  LDY tmp_i
  LDA tmp_A_j
  STA (0x30),Y
  LDA tmp_pivot
  LDX tmp_j
  CLC
  BCC PIVOT_LOOP
